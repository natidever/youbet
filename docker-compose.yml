
services:
  backend:
    build: .
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      - postgres
      - redis
    environment:
      DATABASE_URL: postgresql+psycopg2://user:password@postgres:5432/mydb
      REDIS_URL: redis://redis:6379 
    ports:
      - "8000:8000"
    tty: true
    networks:
      - app_net
    volumes:
      - .:/app
    develop:
      watch:
        - action: sync
          path: ./app              # local FastAPI source
          target: /app/app         # container path, assuming Dockerfile has COPY . /app
          ignore:
            - __pycache__/
            - .pytest_cache/
            - '*.pyc'
        - action: rebuild
          path: pyproject.toml     # for uv dependency management
        - action: rebuild
          path: uv.lock
 
  redis:
    image: redis:8
    # command: ["sh", "-c", "sysctl vm.overcommit_memory=1 && redis-server"]
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - redis_data:/data
    networks:
      - app_net

  game_runner:
    build: .
    command: python -m app.core.game_runner
    # depends_on:
    #   - backend
    #   - postgres
    #   - redis 
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - app_net
    
          
          
    environment:
      DATABASE_URL: postgresql+psycopg2://user:password@postgres:5432/mydb
      REDIS_URL: redis://redis:6379  # <--- required for Pub/Sub + caching
    tty: true
    volumes:
      - .:/app





  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 5s
      timeout: 3s
      retries: 3

volumes:
  postgres_data:
  redis_data:
networks:
  app_net:
    driver: bridge
